params is an example of an observable that is a string of values that gives us those new values

#1 
import { interval } from 'rxjs';
ngONInit(){
  interval(period: 1000).subscribe(next: count => { <-------new value emitted each second and then logged to console
    console.log(count);
  })
} 
#2 observables continue emitting valuables continuously, so to prevent memory leaks you should
unsubscribe to the observable

#3 store subscriptions to prevent memory elak
private firstObsSubscription: Subscription;

ngONInit(){
  this. firstObsSubscription = interval(period: 1000).subscribe(next: count => { <-------new value emitted each second and then logged to console
    console.log(count);
  })

  ngOnDestroy(): void {
    this.firstObsSubscription.unsubscribe(); <----prevents memory leaks
  }
} 
in regards to this angular auto unsubscribes if they are a angular observable, ones you create you must
unsubscribe to prevent memory leaks

#4 create own observable by instantiating 

const customIntervalObservable = Observable.create(observer; => {
let count = 0;
setInterval(handler: () => {
  observer.next(count);
  count++;
}, timeout
});

#5 after creating observable  you can subscribe and unsub 

this.firstObsSubscription = customIntervalObservable.subscribe(data => {
  console.log(data);
  if(count>3) {
    observer.error(new Error( message: 'Count is greater 3!'));
  }
})

#6 observer.error(new Error( message: 'Count is greater 3!'));
once error is thrown it will unsubscribe
can also put error into subscription #5 + this
this.firstObsSubscription = customIntervalObservable.subscribe(data => {
  console.log(data);

  }error => {
    console.log(error);
  alert (error.message);
});

#7 Operators 