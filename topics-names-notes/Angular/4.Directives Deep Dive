# attribute directives
structured around elements and changing them
# structural directives
affect whole area get elements are added or removed

#Better Directive how to create and apply
1. create ng g BetterDirective...optional put in folder
2. EXAMPLE:::::of the better directive 
import { Directive, OnInit, Renderer2, ElementRef } from '@angular/core';

@Directive({
  selector: '[appBetterHighlight]'
})
export class BetterHighlightDirective implements OnInit {

  constructor(private elRef: ElementRef, private renderer: Renderer2) { }
ngOnInit() {
  this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue', false, false);
}
}
3. how to apply <p appBetterHighlight>style me with BetterHighlight</p>

#HostListener how to create and apply 
1. @HostListener() mouseover(){}
2. import from angularcore
3. 

#Hostbinding decorator
1. import from angular
2.@HostBinding('style.backgroundColor') backgroundColor: string;
3. can work with hostlistener 

#ngSwithc 
<div [ngSwitch]="value">
  <p *ngSwitchCase="5">value is 5</p>
  <p *ngSwitchCase="10">value is 10</p>
  <p *ngSwitchCase="100">value is 100</p>
  <p *ngSwitchDefault>value is defaults</p>

#ngFor
*ngFor='let even of evenNumbers'>
  {{even}}

#ngSTyle
 [ngStyle]="{backgroundColor: even % 2 !== 0 ? 'yellow' : 'transparent'}">

 #ngClass [ngClass]="{odd: even % 2 !== 0}"

 #unlessDirective
 export class UnlessDirective {
@Input() set appUnless(condition: boolean) {
if (!condition){
  this.vcRef.createEmbeddedView(this.templateRef);
} else {
this.vcRef.clear();
}
}
  constructor(private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef) { }

}
