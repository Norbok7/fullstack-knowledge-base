#1 import formGroup instantiate it under class,
also import ReactiveFormsModule to module.ts
example: 
export class AppComponent{
  genders = ['male,'female']
  signupForm: FormGroup;
}

#2 then implement ngOnInit, and initialize it
ngONInit(){
  this.signupForm = new FormGroup({

  });
}
#3 then fully initialize it below
  ngONInit(){
  this.signupForm = new FormGroup({
    'username': new FormControl(null)
    'email' : new FormControl(null)
    'gender': new FormControl('male')
  });
}
#4 then connect this/ sync to HTML code
in html under <form>
<form [formGroup]="signupForm"> <---how to connect

#5 in input add
formControlName='username"'
then repeat this for other key value pairs ex. email, and gender

#how to then submit once connected
<form [formGroup]="signupForm" (ngSubmit)='onSubmit()>
then go to typescript
onSubmit(){
  console.log(this.signupForm);
}

#add validation for reactive forms
 'username': new FormControl(null) add to this with more arguments

    'username': new FormControl(null, Validators.required),
    'email' : new FormControl(null, [Validators.required, Validators.email]),
    'gender': new FormControl('male')'

#gaining access to and adding notifications based of values
add <span 
*ngIf='!signupForm.get('username').valid && signupForm.get('username').touched'
repeat for other fields example email

#css style this warning message
input.ng-invalid.ng-touched {
  border: 1px solid red;
}

#formgroup can be overall formgroup
or can be inside of example nested form
reflected nested items with . 

#*ngFor="let hobbyControl of signupForm.get('hobbies').controls; let i = index"

instantiate a array of names u dont want to be userData
forbiddenNames = [rat, jack]

function create
forbiddenNames(control: Formcontrol): {[s: string]: boolean}{
  if(this.forbiddenNames.indexOf(control.value)){
    return {'nameIsForbidden': true};
  }
  return null; <--how to tell them Formcontrol is invalid
}

####ASYNC INVALIDATOR also pass this validator to object this.forbiddenEmail
forbiddenEmail(control: FormControl): Promise<any> | Observable<any> {
  const promise = new Promise<any>((resolve, reject)=> {
    setTimeout(() => {
    if(control.value === 'test@test.com') {
      resolve({'emailIsForbidden': true});
    } else {
      resolve(null);
    }
  }, 1500);
});
return promise;
}

how to track formstate
this.signupForm.valueChanges.subscribe(
  (value) => console.log(value);
);
this.signupForm.setValue({
  'userData': 'Max',
  'email': 'max@@test.com'

}
'gender': 'male',
'hobbies': 'soccer'
)
how to reset form 
this.reset() in Submit
