#Routing makes it seem like pages are changing but it is the same page if done correctly
# step 1
go to app.module.ts and import { Routes} from angularcore
# step 2
create const under imports
const appRoutes: Routes = [
  { path: 'exercises', component: ExerciseListComponent },
  { path: 'home', component: SidebarComponent }
];
# step 3 
add RouterModule to imports on module page
RouterModule.forRoot(appRoutes)
 <ul class ="nav nav-tabs">

        <li role="presentation" class="active"><a routerLink ="/">Home</a></li>
        <li role="presentation" class="active"><a routerLink ="/exercises">Exercises</a></li>
        <li role="presentation" class="active"><a routerLink = "/workoutsCompleted">Total Workouts Completed</a></li>
      </ul>
      in app component html
# step 4
to show active tabs<li routerLinkActive="active">
to then hide home path add this to it 
[routerLinkActiveOptions]="{exact: true}"
# step 5 optional navigate programmatically
can route to a method by inject in constructor 
routerLink in constructor and import it from angular/router
runToRoute(){
this.router.navigate(['pathname']);}

#step 6 know u can inject multiple things in constructor
with , between

#step 7 setup onReload(){
  this.router.navigate(['path'], {relativeTo:this.route});
}
then inject into constructor route: ActivateRout)

#step 8 add parameters to routein module 
{path: 'user/:id/:name', component: UserComponent},
can now load component with dynamic piece
#step 9 with step 8
ngOnInit() {
  this.user = {
    id: this.route.snapshot.params['id'],
    name: this.route.snapshot.params ['name']
  }
}
#step 10 take this to our user.component.html and output that data
<p> User with ID{{user.id}} loaded. </p>
<p> User name is {{user.name}} </p>
#step 11 to make 7-10 more advanced helps to be safer with changes on your components
this.route.params
.subscribe(
  (params: Params) => { 
    this.user.id = params['id'];
    this.user.name = params [ 'name'];
   }
);
#step 11 how to pass ? onto url example= ?mode=editing#loading
in app module add {path: 'servers/i:id/edit' component: }
#step 12 to to give privledge
in html of component add [routerlink]=['/servers',5, 'edit']"
[queryParams]="{allowEdit: '1'}
fragment="loading"
#step 13 how to retrieve that data of query params
#step 14 Child Routes
A child route is a route that is nested within another route. This means that the child route is only accessible if the parent route is also accessed. Child routes are defined in the routing module using the children property.
For example, the following code defines a child route for the /users route:
const routes: Routes = [
  {
    path: 'users',
    component: UsersComponent,
    children: [
      {
        path: ':id',
        component: UserDetailComponent,
      },
    ],
  },
];